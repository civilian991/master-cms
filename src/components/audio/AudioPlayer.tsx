'use client'

import { useState, useRef, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Slider } from '@/components/ui/slider'
import { 
  Play, 
  Pause, 
  Square,
  SkipBack,
  SkipForward,
  Volume2,
  VolumeX,
  Download,
  Settings,
  Headphones,
  Clock,
  FileAudio,
  Mic,
  Globe
} from 'lucide-react'
import { cn } from '@/lib/utils'
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuLabel
} from '@/components/ui/dropdown-menu'

interface AudioPlayerProps {
  audioSrc?: string
  title: string
  author?: string
  duration?: number
  autoGenerated?: boolean
  language?: string
  voiceType?: 'male' | 'female' | 'neutral'
  onPlay?: () => void
  onPause?: () => void
  onEnded?: () => void
  className?: string
}

export function AudioPlayer({
  audioSrc,
  title,
  author,
  duration = 0,
  autoGenerated = false,
  language = 'en',
  voiceType = 'neutral',
  onPlay,
  onPause,
  onEnded,
  className
}: AudioPlayerProps) {
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentTime, setCurrentTime] = useState(0)
  const [volume, setVolume] = useState([75])
  const [playbackRate, setPlaybackRate] = useState([1.0])
  const [isMuted, setIsMuted] = useState(false)
  const [isLoaded, setIsLoaded] = useState(false)
  
  const audioRef = useRef<HTMLAudioElement>(null)

  // Mock audio duration if not provided and no src
  const mockDuration = duration || 420 // 7 minutes default

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60)
    const secs = Math.floor(seconds % 60)
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const getLanguageInfo = (langCode: string) => {
    const languages: Record<string, { name: string; flag: string }> = {
      'en': { name: 'English', flag: '🇺🇸' },
      'ar': { name: 'Arabic', flag: '🇸🇦' },
      'es': { name: 'Spanish', flag: '🇪🇸' },
      'fr': { name: 'French', flag: '🇫🇷' },
      'de': { name: 'German', flag: '🇩🇪' },
      'zh': { name: 'Chinese', flag: '🇨🇳' },
    }
    return languages[langCode] || { name: langCode.toUpperCase(), flag: '🌐' }
  }

  const handlePlayPause = () => {
    if (!audioSrc) {
      // Mock playback for demo
      setIsPlaying(!isPlaying)
      if (!isPlaying) {
        onPlay?.()
        // Simulate time progression
        const interval = setInterval(() => {
          setCurrentTime(prev => {
            if (prev >= mockDuration) {
              clearInterval(interval)
              setIsPlaying(false)
              onEnded?.()
              return 0
            }
            return prev + 1
          })
        }, 1000)
      } else {
        onPause?.()
      }
      return
    }

    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause()
      } else {
        audioRef.current.play()
      }
    }
  }

  const handleStop = () => {
    setIsPlaying(false)
    setCurrentTime(0)
    if (audioRef.current) {
      audioRef.current.pause()
      audioRef.current.currentTime = 0
    }
  }

  const handleSkip = (seconds: number) => {
    if (audioRef.current) {
      audioRef.current.currentTime = Math.max(0, Math.min(mockDuration, audioRef.current.currentTime + seconds))
    } else {
      setCurrentTime(prev => Math.max(0, Math.min(mockDuration, prev + seconds)))
    }
  }

  const handleVolumeChange = (newVolume: number[]) => {
    setVolume(newVolume)
    if (audioRef.current) {
      audioRef.current.volume = newVolume[0] / 100
    }
  }

  const handlePlaybackRateChange = (rate: number) => {
    setPlaybackRate([rate])
    if (audioRef.current) {
      audioRef.current.playbackRate = rate
    }
  }

  const handleSeek = (newTime: number[]) => {
    const time = newTime[0]
    setCurrentTime(time)
    if (audioRef.current) {
      audioRef.current.currentTime = time
    }
  }

  const toggleMute = () => {
    setIsMuted(!isMuted)
    if (audioRef.current) {
      audioRef.current.muted = !isMuted
    }
  }

  const langInfo = getLanguageInfo(language)

  return (
    <Card className={cn("w-full", className)}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2 text-base">
            <Headphones className="h-5 w-5" />
            Audio Player
          </CardTitle>
          <div className="flex items-center gap-2">
            {autoGenerated && (
              <Badge variant="secondary" className="text-xs">
                <Mic className="h-3 w-3 mr-1" />
                AI Generated
              </Badge>
            )}
            <Badge variant="outline" className="text-xs">
              <span className="mr-1">{langInfo.flag}</span>
              {langInfo.name}
            </Badge>
          </div>
        </div>
        <CardDescription className="line-clamp-2">
          {title}
          {author && <span className="text-muted-foreground"> • by {author}</span>}
        </CardDescription>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Waveform Visualization (Mock) */}
        <div className="relative h-16 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg overflow-hidden">
          <div className="absolute inset-0 flex items-end justify-center space-x-1 p-2">
            {Array.from({ length: 50 }, (_, i) => (
              <div
                key={i}
                className={cn(
                  "w-1 bg-gradient-to-t from-blue-400 to-purple-400 rounded-full transition-all duration-200",
                  i < (currentTime / mockDuration) * 50 ? "opacity-100" : "opacity-30"
                )}
                style={{ 
                  height: `${20 + Math.random() * 40}px`,
                  animationDelay: `${i * 50}ms`
                }}
              />
            ))}
          </div>
        </div>

        {/* Progress and Time */}
        <div className="space-y-2">
          <div className="flex justify-between text-sm text-muted-foreground">
            <span>{formatTime(currentTime)}</span>
            <span>{formatTime(mockDuration)}</span>
          </div>
          <Slider
            value={[currentTime]}
            onValueChange={handleSeek}
            max={mockDuration}
            step={1}
            className="w-full"
          />
        </div>

        {/* Main Controls */}
        <div className="flex items-center justify-center space-x-4">
          <Button
            variant="outline"
            size="sm"
            onClick={() => handleSkip(-15)}
          >
            <SkipBack className="h-4 w-4" />
          </Button>
          
          <Button
            variant="default"
            size="lg"
            onClick={handlePlayPause}
            className="h-12 w-12 rounded-full"
          >
            {isPlaying ? (
              <Pause className="h-6 w-6" />
            ) : (
              <Play className="h-6 w-6 ml-1" />
            )}
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={handleStop}
          >
            <Square className="h-4 w-4" />
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => handleSkip(15)}
          >
            <SkipForward className="h-4 w-4" />
          </Button>
        </div>

        {/* Volume and Additional Controls */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleMute}
            >
              {isMuted || volume[0] === 0 ? (
                <VolumeX className="h-4 w-4" />
              ) : (
                <Volume2 className="h-4 w-4" />
              )}
            </Button>
            
            <div className="w-20">
              <Slider
                value={volume}
                onValueChange={handleVolumeChange}
                max={100}
                step={1}
                className="w-full"
              />
            </div>
            
            <span className="text-xs text-muted-foreground w-8">
              {Math.round(volume[0])}%
            </span>
          </div>

          <div className="flex items-center space-x-2">
            {/* Playback Speed */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm">
                  <Clock className="h-3 w-3 mr-1" />
                  {playbackRate[0]}x
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>Playback Speed</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {[0.5, 0.75, 1.0, 1.25, 1.5, 2.0].map((rate) => (
                  <DropdownMenuItem
                    key={rate}
                    onClick={() => handlePlaybackRateChange(rate)}
                    className={cn(rate === playbackRate[0] && "bg-accent")}
                  >
                    {rate}x {rate === 1.0 && "(Normal)"}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            {/* Download */}
            <Button variant="outline" size="sm">
              <Download className="h-3 w-3 mr-1" />
              Download
            </Button>

            {/* Settings */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm">
                  <Settings className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>Audio Settings</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Globe className="h-4 w-4 mr-2" />
                  Change Language
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <FileAudio className="h-4 w-4 mr-2" />
                  Audio Quality
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Mic className="h-4 w-4 mr-2" />
                  Voice Settings
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        {/* Audio Metadata */}
        <div className="grid grid-cols-4 gap-4 pt-4 border-t border-border">
          <div className="text-center">
            <div className="text-sm font-medium">{formatTime(mockDuration)}</div>
            <div className="text-xs text-muted-foreground">Duration</div>
          </div>
          <div className="text-center">
            <div className="text-sm font-medium capitalize">{voiceType}</div>
            <div className="text-xs text-muted-foreground">Voice</div>
          </div>
          <div className="text-center">
            <div className="text-sm font-medium">128kbps</div>
            <div className="text-xs text-muted-foreground">Quality</div>
          </div>
          <div className="text-center">
            <div className="text-sm font-medium">{langInfo.name}</div>
            <div className="text-xs text-muted-foreground">Language</div>
          </div>
        </div>

        {/* Hidden Audio Element */}
        {audioSrc && (
          <audio
            ref={audioRef}
            src={audioSrc}
            onLoadedData={() => setIsLoaded(true)}
            onPlay={() => setIsPlaying(true)}
            onPause={() => setIsPlaying(false)}
            onTimeUpdate={(e) => {
              const audio = e.target as HTMLAudioElement
              setCurrentTime(audio.currentTime)
            }}
            onEnded={() => {
              setIsPlaying(false)
              setCurrentTime(0)
              onEnded?.()
            }}
            preload="metadata"
          />
        )}
      </CardContent>
    </Card>
  )
}