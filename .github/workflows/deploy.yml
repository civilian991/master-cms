name: Multi-Site Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      site:
        description: 'Site to deploy (himaya, cryptonews, iktissad, technews)'
        required: true
        default: 'himaya'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - dev
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Build application
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Infrastructure Validation
  infrastructure-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./infrastructure/terraform

    - name: Terraform Init
      run: terraform init
      working-directory: ./infrastructure/terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infrastructure/terraform

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./infrastructure/terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, infrastructure-validation]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name master-cms-cluster

    - name: Deploy to Kubernetes
      run: |
        # Deploy base infrastructure
        kubectl apply -f infrastructure/kubernetes/base/
        
        # Deploy monitoring
        kubectl apply -f infrastructure/kubernetes/monitoring/
        
        # Deploy all sites to dev environment
        for site in himaya cryptonews iktissad technews; do
          sed "s/{{SITE_NAME}}/$site/g; s/{{SITE_DOMAIN}}/$site.dev.master-cms.com/g; s/{{SITE_NAMESPACE}}/$site-dev/g" \
            infrastructure/kubernetes/sites/site-template.yaml | kubectl apply -f -
        done

    - name: Wait for deployment
      run: |
        for site in himaya cryptonews iktissad technews; do
          kubectl rollout status deployment/$site-app -n $site-dev --timeout=300s
        done

    - name: Run smoke tests
      run: |
        for site in himaya cryptonews iktissad technews; do
          curl -f https://$site.dev.master-cms.com/api/health || exit 1
        done

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, infrastructure-validation]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name master-cms-cluster

    - name: Deploy to Kubernetes
      run: |
        # Deploy base infrastructure
        kubectl apply -f infrastructure/kubernetes/base/
        
        # Deploy monitoring
        kubectl apply -f infrastructure/kubernetes/monitoring/
        
        # Deploy specific site or all sites
        if [ "${{ github.event.inputs.site }}" != "" ]; then
          site=${{ github.event.inputs.site }}
          sed "s/{{SITE_NAME}}/$site/g; s/{{SITE_DOMAIN}}/$site.staging.master-cms.com/g; s/{{SITE_NAMESPACE}}/$site-staging/g" \
            infrastructure/kubernetes/sites/site-template.yaml | kubectl apply -f -
        else
          for site in himaya cryptonews iktissad technews; do
            sed "s/{{SITE_NAME}}/$site/g; s/{{SITE_DOMAIN}}/$site.staging.master-cms.com/g; s/{{SITE_NAMESPACE}}/$site-staging/g" \
              infrastructure/kubernetes/sites/site-template.yaml | kubectl apply -f -
          done
        fi

    - name: Wait for deployment
      run: |
        if [ "${{ github.event.inputs.site }}" != "" ]; then
          site=${{ github.event.inputs.site }}
          kubectl rollout status deployment/$site-app -n $site-staging --timeout=300s
        else
          for site in himaya cryptonews iktissad technews; do
            kubectl rollout status deployment/$site-app -n $site-staging --timeout=300s
          done
        fi

    - name: Run integration tests
      run: |
        if [ "${{ github.event.inputs.site }}" != "" ]; then
          site=${{ github.event.inputs.site }}
          npm run test:integration -- --site=$site.staging.master-cms.com
        else
          for site in himaya cryptonews iktissad technews; do
            npm run test:integration -- --site=$site.staging.master-cms.com
          done
        fi

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, infrastructure-validation]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name master-cms-cluster

    - name: Deploy to Kubernetes
      run: |
        # Deploy base infrastructure
        kubectl apply -f infrastructure/kubernetes/base/
        
        # Deploy monitoring
        kubectl apply -f infrastructure/kubernetes/monitoring/
        
        # Deploy specific site or all sites
        if [ "${{ github.event.inputs.site }}" != "" ]; then
          site=${{ github.event.inputs.site }}
          sed "s/{{SITE_NAME}}/$site/g; s/{{SITE_DOMAIN}}/$site.master-cms.com/g; s/{{SITE_NAMESPACE}}/$site-prod/g" \
            infrastructure/kubernetes/sites/site-template.yaml | kubectl apply -f -
        else
          for site in himaya cryptonews iktissad technews; do
            sed "s/{{SITE_NAME}}/$site/g; s/{{SITE_DOMAIN}}/$site.master-cms.com/g; s/{{SITE_NAMESPACE}}/$site-prod/g" \
              infrastructure/kubernetes/sites/site-template.yaml | kubectl apply -f -
          done
        fi

    - name: Wait for deployment
      run: |
        if [ "${{ github.event.inputs.site }}" != "" ]; then
          site=${{ github.event.inputs.site }}
          kubectl rollout status deployment/$site-app -n $site-prod --timeout=300s
        else
          for site in himaya cryptonews iktissad technews; do
            kubectl rollout status deployment/$site-app -n $site-prod --timeout=300s
          done
        fi

    - name: Run production tests
      run: |
        if [ "${{ github.event.inputs.site }}" != "" ]; then
          site=${{ github.event.inputs.site }}
          npm run test:e2e -- --site=$site.master-cms.com
        else
          for site in himaya cryptonews iktissad technews; do
            npm run test:e2e -- --site=$site.master-cms.com
          done
        fi

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Production deployment completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback (Manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rollback'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name master-cms-cluster

    - name: Rollback deployment
      run: |
        site=${{ github.event.inputs.site }}
        kubectl rollout undo deployment/$site-app -n $site-prod

    - name: Wait for rollback
      run: |
        site=${{ github.event.inputs.site }}
        kubectl rollout status deployment/$site-app -n $site-prod --timeout=300s

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Rollback completed for ${{ github.event.inputs.site }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 